//------------------------------------------------------------------------------

//  Formula Name  : Heat Map and Watchlist flow

//  Edit by       : HuyTuan 

//  Phone         : 0937798534

//  Last Update   : 03 June 2023

//  Version       : 3.0

// Amibroker Group: https://t.me/amibrokercodevn

// About me		  : https://t.me/huytuanvt

// Moi ung ho xin gui vao stk: 0081001154112 - Le Xuan Tuan - Ngan Hang VCB Vung Tau

//-----------------------------------------------------------------------------


pxwidth = Status( "pxwidth" );
pxheight = Status( "pxheight" );
fixx=1/1880*pxwidth;
fixy=1/870*pxheight;
colorNen=ParamColor("colorNen", ColorRGB(240,240,240));
GfxSelectSolidBrush( colorNen );
GfxRoundRect( 0, 0 , pxwidth , pxheight , 0, 0 );
_SECTION_BEGIN("Heatmap");
WatchList = "";
//////////////////////////////////////////////////////////////////

procedure SetOrigin(x0, y0) {
	global _x0, _y0;
	_x0 = x0; _y0 = y0;
}
_cursorMouseButtons = GetCursorMouseButtons();
DT_CENTER = 1; DT_VCENTER = 4 | 32; 
function GfxGetState(id) {
	return Nz(StaticVarGet("GfxState"+id+GetChartID()), 0);
}
function PointInside(x0, y0, x, y, width, height) {
    global _x0, _y0;
	x = x+_x0; y = y+_y0;
    x0 = x0+_x0; y0 = y0+_y0;
	return ((x0 >= x) && (y0 >= y) && (x0 <= (x+width)) && (y0 <= (y+height)));
}
function LeftClickInside(x, y, width, height) {
	global _cursorMouseButtons, _x0, _y0;
	local px, py, res;
	//x = x+_x0; y = y+_y0;
	res = False;
	if (_cursorMouseButtons & 8) { // click
		px = GetCursorXPosition(1); 
		py = GetCursorYPosition(1); 
		res = PointInside(px, py, x, y, width, height);
	}
	return res;
}
procedure GfxSetState(id, val) {
	StaticVarSet("GfxState"+id+GetChartID(), val);
}
function GfxHTabs(id, headers, headheight, x, y, width, height, colorfg, colorbg) {
	global _x0, _y0;
	local py,choice,na,i,n,header,w, wi, prevwi;
	x = x+_x0; y = y+_y0; choice = GfxGetState(id);
	for(n = 0; (header = StrExtract(headers,n)) != ""; ++n) {};
	w = width/n; wi = y; prevwi = y;
	if (LeftClickInside(x,y,width,height)) {
		py = GetCursorYPosition( 1 );
		//px = GetCursorXPosition(1); 
		//choice = floor((px - x)/w);
		 //wi = y; prevwi = y;
		for(i = 0; (header = StrExtract(headers,i)) != ""; ++i) {
			wi =wi+headheight;
			
			if ((py > prevwi) && (py < wi))  { choice = i; break; }
		}
		GfxSetState(id, choice); // StaticVarSet(na, choice);
	}
	GfxSetBkMode(1);
	// Draw Zone & Tabs
	wi = y; prevwi = y;
	for(i = 0; (header = StrExtract(headers,i)) != ""; ++i) {
		wi = wi + headheight;
		 GfxSelectSolidBrush(colorPaleGreen); 
		 GfxSelectPen( colorLightGrey, 0 ); // data tooltip round border color
		GfxRoundRect(x,prevwi-1,x+width,wi,5,5); 
		GfxSelectSolidBrush( colorbg );
		if (i != choice) {
			GfxSelectHatchBrush(colorbg,7); 
			GfxRoundRect(x,prevwi-1,x+width,wi,5,5);
			GfxSelectSolidBrush( colorbg );
		} else {
			wic = wi; prevwic = prevwi;
		}
		GfxSetTextColor( colorDarkGrey );
		GfxSelectFont("Verdana",8*fixy, 500);//Tahoma
		GfxDrawText(header, (x-100)*fixx, prevwi, (x+235)*fixx, wi, 1|4|32);
////////
	prevwi = wi;
	}
	return choice;
}
procedure GfxTSI(x,y) {
	SetOrigin(x,y);
NGANHANG=ParamStr("NGAN HANG","ABB,ACB,BAB,BID,BVB,CTG,EIB,HDB,KLB,LPB,MBB,MSB,NAB,NVB,OCB,PGB,SGB,SHB,STB,TCB,TPB,VBB,VCB,VIB,VPB,SSB,VAB");
CHUNGKHOAN=ParamStr("CHUNG KHOAN","AAS,AGR,APG,BSI,BVS,CTS,EVF,EVS,FTS,HCM,MBS,SBS,SHS,SSI,VCI,VDS,VIX,VND,APS,HBS,IVS,ORS,TVB,TVS,VIG,WSS,BMS,TCI,VFS");
THEP=ParamStr("THEP","BVG,HMC,HPG,HSG,NKG,POM,SHA,SHI,SMC,TLH,TVN,VGS,TNS,VCA,KVC,NSH,ITQ");
DAUKHI=ParamStr("DAU KHI","BSR,CNG,GAS,OIL,PET,PLX,POW,PSH,PVB,PVC,PVD,PVS,PVT,PVX,PXS,PGC,PLC");
BAOHIEM=ParamStr("BAO HIEM","BVH,BMI,MIG,PVI,BIC,ABI,VNR");
BATDONGSAN=ParamStr("BAT DONG SAN","AGG,BII,CCL,CEO,DIG,DLG,DPG,DRH,DTD,DXG,HAR,HBC,HDC,HDG,HLD,HQC,HUT,IJC,KDH,LGL,MCG,NBB,NDN,NTL,NVL,PDR,SCR,TCH,TDH,VHM,VIC,VPH,VRE,HTN,VMC,CRE,DTA,HAG,IDJ,IDV,ITC,NHA,OGC,SGR,AAV,API,DXS,FIR,HPX,KHG,NRC,PWA,TEG,VPI,VRC");
BDSKCN=ParamStr("BDS-KCN","D2D,GVR,IDC,ITA,KBC,LDG,LHG,NLG,NTC,PHR,QCG,REE,SIP,SJS,SZC,SZL,TDC,TIG,TIP");
XD_VLXD=ParamStr("XD_VLXD","VCG,VC7,HU4,MST,ROS,VC3,ACC,QNC,SCL,VGC,BCE,CSC,HTI,TTB,APC,C69,CDO,CRC,HID,HVH,LIG,PAS,S99,SCG,SCI,SDP,TLD,UDJ,EVG,CTD,PHC,CKG");
DAUTUCONG=ParamStr("DAU TU CONG","BCC,BTS,C32,C47,C4G,CII,CTI,DHA,FCN,G36,HOM,HT1,KSB,LCG,SD5,SD6,SD9,TCD,THG,TV2");
CAOSU=ParamStr("CAO SU","DPR,DRC,DRI,GVR,PHR,VHG,HNG");
DETMAY=ParamStr("DET MAY","ADS,EVE,FTM,GIL,KMR,MSH,STK,TCM,TNG,VGT");
THANKHOANGSAN=ParamStr("THAN - KHOANG SAN","CLX,KSB,MDC,NBC,NNC,TDN,THT,TVD,VEF,CST,BMC,DHM,KHB,KSQ,MSR,TC6,TNT");
THUYSAN=ParamStr("THUYSAN","ACL,ANV,ASM,CMX,FMC,IDI,MPC,VHC");
THUCPHAMXK=ParamStr("THUC PHAM-XK","AFX,DBC,DHC,GTN,KDC,LTG,MHC,MSN,NAF,PTB,TNA,VCS,VLC,VNM,VOC,APF,BNA,KDF,MCM,MLS,TAR,VHE");
HOACHATPHANBON=ParamStr("HOA CHAT - PHAN BON","BFC,CSV,DCM,DDV,DGC,DPM,LAS,LIX,QBS,TSC,PMB,SBV,HCD,ABS");
BLECONGNGHE=ParamStr("CONG NGHE - BAN LE","CMG,DGW,ELC,FOX,FPT,FRT,ITD,MWG,PET,PNJ,SAB,SGT,SAM,SRA,TTN,CTR,VGI");
CANGVANTAI=ParamStr("CANG - VAN TAI","DVP,DXP,GMD,HAH,PHP,PVP,PVT,SGP,SKG,SWC,TCL,TCW,VIP,VOS,VSC,VTO,STG,GSP,HHG,TCO,TMS,VNA,ILB,PVP");
DICHVU=ParamStr("DICH VU","HAX,PAN,TCT,VNG,VTP,KLF");
DIEN_NANGLUONG=ParamStr("DIEN_NANGLUONG","KHP,PPC,PVG,QTP,VSH,TTA,GEG,SJD,NT2,REE,PC1,HND,GEX,VNE");
DTPT=ParamStr("DTPT","EID,FID,FIT,HHS,SJF,VCR,SHN");
DUONGGO=ParamStr("DUONG - GO","GDT,LSS,QNS,SBT,TTF");
HANGKHONGDULICH=ParamStr("HANG KHONG-DU LICH","ACV,AST,HVN,SAS,VJC,VTD,NCT,DAH,RIC");
NUOCNHUA=ParamStr("NUOC NHUA","AAA,APH,BMP,BWE,DAG,NTP,TDM,VNP,HII,NHH,PGN,PLP");
SXKD=ParamStr("SXKD","DQC,HAP,NAG,PAC,RAL,SAV,TLG");
YTEDUOC=ParamStr("YTEDUOC","AMV,DBD,DCL,DHG,DMC,DVN,JVC,TNH");
//////
n = GfxHTabs("HTab1", "NG\u00C2N H\u00C0NG,CH\u1EE8NG KHO\u00C1N,TH\u00C9P,D\u1EA6U KH\u00CD,B\u1EA2O HI\u1EC2M,B\u1EA4T \u0110\u1ED8NG S\u1EA2N,BDS - KCN,XD - VLXD,\u0110\u1EA6U T\u01AF C\u00D4NG,CAO SU, D\u1EC6T MAY,THAN-KS,TH\u1EE6Y S\u1EA2N,TH\u1EF0C PH\u1EA8M-XK,H/CH\u1EA4T-P/B\u00D3N,B/L\u1EBA-C/NGH\u1EC6,C\u1EA2NG-V\u1EACN T\u1EA2I,D\u1ECACH V\u1EE4,\u0110I\u1EC6N-N/L\u01AF\u1EE2NG,DTPT,\u0110\u01AF\u1EDCNG G\u1ED6,H/KH\u00D4NG - DL,N\u01AF\u1EDA\u0043 NH\u1EF0A,SXKD,YT\u1EBE-D\u01AF\u1EE2\u0043,THEO D\u00D5I TU\u1EA6N,THEO D\u00D5I NG\u00C0Y,CP NOTE", 28.5*fixy, 0, 0, 135*fixx, 1200, colorBlack, ColorBlend( colorLime, colorWhite, 0.9 )); 
switch(n) {
case 0: 
WatchList =NGANHANG;
break;
case 1: 
WatchList =CHUNGKHOAN;
break;
case 2: 
WatchList =THEP;
break;
case 3: 
WatchList =DAUKHI;
break;
case 4: 
WatchList =BAOHIEM;
break;
case 5: 
WatchList =BATDONGSAN;
break;
case 6: 
WatchList =BDSKCN;
break;
case 7: 
WatchList =XD_VLXD;
break;
case 8: 
WatchList =DAUTUCONG;
break;
case 9: 
WatchList =CAOSU;
break;
case 10: 
WatchList =DETMAY;
break;
case 11: 
WatchList =THANKHOANGSAN;
break;
case 12: 
WatchList =THUYSAN;
break;
case 13: 
WatchList =THUCPHAMXK;
break;
case 14: 
WatchList =HOACHATPHANBON;
break;
case 15: 
WatchList =BLECONGNGHE;
break;
case 16: 
WatchList =CANGVANTAI;
break;
case 17: 
WatchList =DICHVU;
break;
case 18: 
WatchList =DIEN_NANGLUONG;
break;
case 19: 
WatchList =DTPT;
break;
case 20: 
WatchList =DUONGGO;
break;
case 21: 
WatchList =HANGKHONGDULICH;
break;
case 22: 
WatchList =NUOCNHUA;
break;
case 23: 
WatchList =SXKD;
break;
case 24: 
WatchList =YTEDUOC;
break;
case 25: 
WatchlistName1 = ParamStr("WL1", "Theo Doi");
wlnumber = CategoryFind(WatchlistName1, cat = categoryWatchlist); 
WatchList =CategoryGetSymbols(cat, wlnumber);
break;
case 26: 
WatchlistName = ParamStr("WL2", "TD New");
wlnumber = CategoryFind(WatchlistName, cat = categoryWatchlist); 
WatchList =CategoryGetSymbols(cat, wlnumber);
break;
case 27: 
WatchlistName = ParamStr("WL3", "Note");
wlnumber = CategoryFind(WatchlistName, cat = categoryWatchlist); 
WatchList =CategoryGetSymbols(cat, wlnumber);
break;
}}
x = Param("X_Menu", 0, 0, 1980, 20);
y1 = Param("Y_Menu", 68, 0, 1980, 20);
y=y1*fixy;
GfxTSI(x,y);


NumRowColumn        = Param("Number of Rows/Columns:", 8, 2, 10, 1);
BasePeriod      = 30;
global Prefix, Suffix, SgnFlag, format, TrendAngle;
SgnFlag         = 1;
TotalScore      = 0;
MouseFlag       = 0;
TimeStamp       = 0;
ExecuteTime     = 0;
NumTickers      = NumRowColumn^2;
Trigger         = 0;
DoRefresh       = 0;
BackGroundColor = 0;
EnableScript("JScript");
 <%
 function SetChartTicker(newTicker)
{
 AB = new ActiveXObject("Broker.Application");
 AB.ActiveDocument.Name = newTicker;
 return 1;
}
 %>
 function GetSymbols()
{
 TickerList = "";

 for(n = 0; n < NumTickers; n++)
    {
     Ticker         = StrExtract(WatchList,n);
     TickerList     = TickerList + Ticker + ",";
    }
 return TickerList;
}
 function GetSecondNum()
{
    Time        = Now( 4 );
    Seconds     = int( Time % 100 );
    Minutes     = int( Time / 100 % 100 );
    Hours       = int( Time / 10000 % 100 );
    SecondNum = int( Hours * 60 * 60 + Minutes * 60 + Seconds );
    return SecondNum;
}
global SVKey;
SVKey = NumToStr(GetChartID(),1.0,False);
 
procedure xStaticVarSet( SName, SValue )
{
 global SVKey;
 InIndicator = Status("Action") == 1;
 if( InIndicator ) StaticVarSet(Sname+SVKey, Svalue);
}
function xStaticVarGet( SName )
{
 global SVKey;
 if( IsNull( Var = StaticVarGet(Sname+SVKey) ) ) Var = 0;;
 return Var;
}
procedure xStaticVarSetText( SName, SValue )
{
 global SVKey;
 InIndicator = Status("Action") == 1;
 if( InIndicator ) StaticVarSetText(Sname+SVKey, Svalue);
}
function xStaticVarGetText( SName )
{
 global SVKey;
 return StaticVarGetText(Sname+SVKey);
}
function GetScore(Ticker )
{
     C1      = SelectedValue(TimeFrameGetPrice( "C", inDaily, -1 ));
    Value   = (LastValue(Close)-LastValue(Ref(Close,-1)))/LastValue(Ref(Close,-1))*100;
    Prefix  = "Chg%: ";
    Suffix  = "%";
    SgnFlag= 0;
    format  = 1.2;
     xStaticVarSetText("Prefix", Prefix);
xStaticVarSetText("Suffix", Suffix);
xStaticVarSet("SgnFlag", SgnFlag);
xStaticVarSet("format", format);

return Value;
}
//====================================================================
procedure getPositionScores(WatchList, NumTickers)
{
    global TopTickerList, TopTickerClose, TopTickerVolume, TickerList, TopTickerScore, TopTickerNum, TotalScore, MaxNegVal, MinNegVal, MaxPosVal, MinPosVal;
    TotalScore      = 0;
    TickerList      = GetSymbols();
    CompTickers = "";
    MaxNegVal       = 0;
    MinNegVal       = -100000000;
    MaxPosVal       = 0;
    MinPosVal       = 100000000;
    TickerClose = TickerVolume = TickerScores = Tickerindex = 0;
 
    // Create zero-based Scores array in wrt to current data
    for( n = 0; (Ticker = StrExtract(TickerList, n)) != ""; n++)
        {
        SetForeign(Ticker);
        Temp    = LastValue(GetScore(Ticker));
        SClose = LastValue(Close);
        SVolume = LastValue(Volume);
        TotalScore  = TotalScore + abs(temp);
 

 
        if(temp < 0){
        if(MinNegVal < temp) MinNegVal = temp;
        if(MaxNegVal > temp) MaxNegVal = temp;}
 
        if(temp > 0){
        if(MinPosVal > temp) MinPosVal = temp;
        if(MaxPosVal < temp) MaxPosVal = temp;}
 
        RestorePriceArrays();
        TickerScores[n]     = Temp;
        TickerIndex[n]  = n;
        TickerClose[n]  = SClose;
        TickerVolume[n]  = SVolume;
        }
 
    TickerCount= n;
    TopTickerList  = TopTickerClose = TopTickerVolume = TopTickerNum = TopTickerScore = Toptickerlist     = "";
    i = 0;
 
if( TotalScore > 0)
{      
    // Sort Tickers by rank
    for(i = n; i > 0; i--)
        {
        for (j = 1; j < i; j++)
            {
            if (TickerScores[j-1] > TickerScores[j])
                {
                temp                = TickerScores[j-1];
                TickerScores[j-1]   = TickerScores[j];
                TickerScores[j]     = temp;
                temp                = TickerIndex[j-1];
                TickerIndex[j-1]    = TickerIndex[j];
                TickerIndex[j]  = temp;
                }
            }
        }
 
    for(n = TickerCount-1; n > -1; n--)
        {
        T5[i++]             = TickerIndex[n];
        Ticker          = StrExtract(Tickerlist,T5[i-1]);
        SClose              = NumToStr(TickerClose[T5[i-1]],1.2,0);
        SVolume              = NumToStr(TickerVolume[T5[i-1]],1.0,0);
        Score           = NumToStr(TickerScores[n],1.2,0);
        TickerNum           = NumToStr(TickerIndex[n],1.0,0);
        TopTickerList   = TopTickerList + Ticker + ",";
        TopTickerClose  = TopTickerClose + SClose + ",";
        TopTickerVolume  = TopTickerVolume + SVolume + ",";
        TopTickerScore  = TopTickerScore + Score +",";
        TopTickerNum        = TopTickerNum + TickerNum +",";
        }
}
else //But if we do not want to sort the Tickers, then we need to do this:
{   for(n = 0; n < 100; n++)
        {
        Ticker          = StrExtract(Tickerlist,n);
        SClose              = NumToStr(TickerClose[n],1.2,0);
        SVolume              = NumToStr(TickerVolume[n],1.0,0);
        Score           = NumToStr(TickerScores[n],1.2,0);
        TickerNum           = NumToStr(TickerIndex[n],1.0,0);
        TopTickerList   = TopTickerList + Ticker + ",";
        TopTickerClose  = TopTickerClose + SClose + ",";
        TopTickerVolume  = TopTickerVolume + SVolume + ",";
        TopTickerScore  = TopTickerScore + Score +",";
        TopTickerNum        = TopTickerNum + TickerNum +",";
        }
}
xStaticVarSet("TotalScore", TotalScore);
xStaticVarSet("MinNegVal", MinNegVal);
xStaticVarSet("MaxNegVal", MaxNegVal);
xStaticVarSet("MinPosVal", MinPosVal);
xStaticVarSet("MaxPosVal", MaxPosVal);
xStaticVarSetText("TopTickerList", TopTickerList);
xStaticVarSetText("TopTickerClose", TopTickerClose);
xStaticVarSetText("TopTickerVolume", TopTickerVolume);
xStaticVarSetText("TopTickerScore", TopTickerScore);
StaticVarSetText("CompTickers",CompTickers);
//Let you retrieve the list of Tickers in the Composite from other Indicators.
xStaticVarSet("BackGroundColor", colorWhite);
}
//====================================================================
// DEFINE THE COLORS FOR THE SYMBOL RECTANGLES:
// Higher positive value = green, Lower positive value = light green
// Higher negative value = red  , Lower negative value = pink
//====================================================================
function FillColor(Value)
{
UpRed       = 0;
UpGreen = 255;
UpBlue      = 0;
DnRed       = 255;
DnGreen = 0;
DnBlue      = 0;
DarkColor   = 0;
LightColor  = 230;
////////==0
 Red=255;
 Green = 255;
 Blue =200;    
if(Value > 0)
{
    UpRed = LightColor - int((LightColor -(((MaxPosVal-Value)*(LightColor-DarkColor))/(MaxPosVal-MinPosVal))));
    if(Value == 0) UpRed = 255;
    UpBlue = UpRed;
}
if(Value < 0)
{
    DnGreen = LightColor - int((LightColor -(((abs(MaxNegVal)-abs(Value))*(LightColor-DarkColor))/(abs(MaxNegVal)-abs(MinNegVal)))));
    if(Value == 0) DnGreen = 255;
    DnBlue = DnGreen;
}
 
 if(Value == 0)
{
   Red=255;
   Green = 255;
    Blue =200;
}
Color   = IIf(Value > 0,ColorBlend( ColorRGB(UpRed, UpGreen, UpBlue), colorWhite, 0.5 ) ,IIf(Value < 0,ColorBlend( ColorRGB(DnRed, DnGreen, DnBlue), colorWhite, 0.5 ),ColorBlend(ColorRGB(Red, Green, Blue), colorWhite, 0.4 ) ));
return Color;
}


//====================================================================
// CAN SWITCH OFF THE INDICATOR, SINCE IT'S VERY POWER HUNGRY!
// BUT THE REFRESH TIME CAN ALSO BE SET: 1- 300 SECONDS.
//====================================================================
if( Status("Action") == 1 )
{
 

 Value      = 0;
 Prefix     = "";
 Suffix     = "";
 SgnFlag        = 0;
 format     = 0;
//====================================================================
// GET STATIC VALUES, CHECK IF ANYTHING UPDATED AND REFRESH ACCORDINGLY
//====================================================================
 RefreshFlag        = 0;
 Prefix             = xStaticVarGetText("Prefix");
 Suffix             = xStaticVarGetText("Suffix");
 SgnFlag            = xStaticVarGet("SgnFlag");
 format         = xStaticVarGet("format");
 
 TotalScore         = xStaticVarGet("TotalScore");
 MinNegVal      = xStaticVarGet("MinNegVal");
 MaxNegVal      = xStaticVarGet("MaxNegVal");
 MinPosVal      = xStaticVarGet("MinPosVal");
 MaxPosVal          = xStaticVarGet("MaxPosVal");
 TopTickerList  = xStaticVarGetText("TopTickerList");
 TopTickerClose = xStaticVarGetText("TopTickerClose");
 TopTickerVolume = xStaticVarGetText("TopTickerVolume");
 TopTickerScore = xStaticVarGetText("TopTickerScore");
 
 TimePeriod = Interval();

 {
  RefreshFlag = 1;
  //xStaticVarSet("ParamTotal", ParamTotal);
  //xStaticVarSetText("SortBy", SortBy);
  xStaticVarSet("BasePeriod", BasePeriod);
  xStaticVarSet("TimePeriod", TimePeriod);
  xStaticVarSet("MouseFlag", 0);
 }
 
TimeFrame = Interval();
SecNumber = GetSecondNum();
Newperiod = SecNumber % TimeFrame == 0;
SecsLeft    = SecNumber - int( SecNumber / TimeFrame ) * TimeFrame;
SecsToGo    = TimeFrame - SecsLeft;
if(xStaticVarGet("DoRefresh"))
{
if(NumTickers < BarCount)
{
 xStaticVarSet("DoRefresh", False);
 GetPerformanceCounter(True);
 getPositionScores(WatchList, NumTickers);
 xStaticVarSet("ExecuteTime", GetPerformanceCounter());
}
else
    PopupWindow( "Edited by Huy Tuan-0937798534    (https://t.me/amibrokercodevn)", "Heatmap and Watchlist flow!", 5, -1, -1 );
}
     xStaticVarSet("Trigger", True);
 
if(xStaticVarGet("Trigger"))
{
 Time = NumToStr(Now(4) , 1.0, 0);
 if(StrLen(Time)== 4) Time = "00"+Time;
 if(StrLen(Time)== 5) Time = "0"+Time;
 Hours  = StrLeft(Time, 2);
 Minutes    = StrMid(Time, 2, 2);
 Seconds    = StrRight(Time, 2);
 xStaticVarSetText("TimeStamp", Hours+":"+Minutes+":"+Seconds);
 
xStaticVarSet("DoRefresh",True); // this queues the refresh operation for the next pass through the code
xStaticVarSet("Trigger", False);
xStaticVarSet("BackGroundColor", ColorRGB(255, 255, 150));
}
 SetChartBkColor(Nz(xStaticVarGet("BackGroundColor")));
//====================================================================
// THE GRAPHIC PRESENTATION:
//====================================================================
 x2         = Status("pxchartright");
 y2         = Status("pxchartbottom");
PenColor   = ColorBlend( colorBlack, colorWhite, 0.2 );
PenColor1   = ColorBlend( colorBlack, colorWhite, 0.5 );
 Width  = Param("Width", 217.5, 100, 500, 1);
 Hight    = Param("Hight", 100, 50, 200, 1);
 StartX =1;
 StartY =1;
 khoangtren1=Param("khoangtren:", 65, 0, 200, 1);
 khoangtren= khoangtren1*fixy;

 PointSize  = 10;
 Weight = 100;
 GfxSetBkMode(1);
//////////////


 for( i = 0; i < NumRowColumn; i++ )
 {
    for(e=0; e < NumRowColumn; e++)
    {
        Symbol  = StrExtract(TopTickerList, i + (e * NumRowColumn));
        ForClose    = StrExtract( TopTickerClose, i + (e * NumRowColumn));
        ForVolume    = StrExtract( TopTickerVolume, i + (e * NumRowColumn));
        Value2  = StrToNum(StrExtract(TopTickerScore, i + (e * (NumRowColumn))));
        Sgn = IIf(SgnFlag < 1, 1, IIf( Value2 > 0, 1, -1));
        Favourites = CategoryGetSymbols(categoryFavorite, 0);
        sym_num = StrCount(WatchList, ",")+1;
        CO=IIf(i + (e * NumRowColumn)<sym_num,FillColor(Value2),colorNen);
        CO1=IIf(i + (e * NumRowColumn)<sym_num,PenColor,colorNen);
        CO2=IIf(i + (e * NumRowColumn)<sym_num,PenColor1,colorNen);
        PenWidth = IIf(StrFind(","+Favourites+",", ","+Symbol+",") > 0, 4, 1);
        GfxSelectPen(CO2,1);
        //GfxSetTextAlign( 0 );
        GfxSelectSolidBrush(CO);
        Result  = NumToStr(Sgn * Value2, Format,1);
        //mav20=ForVolume/MA(ForVolume,20);
        GfxRoundRect( (StartX + ((i+1) * Width)-80)*fixx, (StartY+1 + (e * Hight))*fixy+khoangtren, (Width * (i+2)-80)*fixx, Hight * (e+1)*fixy+khoangtren, 15, 15 );
            PlotInformation ="\r"+ "Gia: " + ForClose +"\r"+ "Vol: " + ForVolume + "\r"+ Prefix + Result + Suffix;
            GfxSelectFont( "Arial", 17*fixy, 600 );
			GfxSetTextColor( CO1 );
        GfxDrawText(Symbol, (StartX + ((i) * Width))*fixx, (16 + StartY + (e * Hight))*fixy+khoangtren, (Width * (i+2)-80)*fixx, Hight * (e+1)*fixy+khoangtren, 1);
        GfxSelectFont( "Arial", 10*fixy, 600 );
         GfxDrawText(ForClose, (StartX + ((i) * Width))*fixx, (16 + StartY+5 + (e * Hight))*fixy+khoangtren, (Width * (i+2)+50)*fixx, Hight * (e+1)*fixy+khoangtren, 1);
         GfxDrawText(Result + Suffix, (StartX + ((i) * Width))*fixx, (16 + StartY+5 + (e * Hight))*fixy+khoangtren, (Width * (i+2)+200)*fixx, Hight * (e+1)*fixy+khoangtren, 1);
         GfxSelectFont( "Arial", 11*fixy, 500 );
         GfxDrawText("Volume: " +ForVolume, (StartX + ((i) * Width))*fixx, (6 + StartY+60 + (e * Hight))*fixy+khoangtren, (Width * (i+2)+50)*fixx, Hight * (e+1)*fixy+khoangtren, 1);
     if (LeftClickInside((StartX + ((i+1) * Width)-80)*fixx,(StartY+1 + (e * Hight))*fixy+khoangtren,Width*fixx,Hight*fixy)) 
		{
		py = GetCursorYPosition( 1 );
		px = GetCursorXPosition(1); 
		//choice = floor((px - x)/w);
		 //wi = y; prevwi = y;
		 script = GetScriptObject();
		script.SetChartTicker(Symbol);
		}
    }}}


//##KHUNG THI TRUONG CHUNG
{
Listthitruongchung = "VNINDEX,VN30INDEX,HNXINDEX,UPCOMINDEX,VN30F1M";
for ( e = 0; e <= 4; e++ ) 
{
thitruong=StrExtract(Listthitruongchung, e);
thitruong1=WriteIf(thitruong=="VN30INDEX","VN30",WriteIf(thitruong=="HNXINDEX","HNX",WriteIf(thitruong=="UPCOMINDEX","UPCOM",thitruong)));
XX=IIf(thitruong=="VN30INDEX",15,IIf(thitruong=="HNXINDEX",10,0));
Cl_thitruong=Foreign(thitruong,"Close");
ROC_thitruong=ROC(Cl_thitruong,1);
CHG_thitruong=LastValue(Cl_thitruong-Ref(Cl_thitruong,-1));
thitruong_statusc1=WriteIf(LastValue(ROC_thitruong)>0,WriteVal(LastValue(Cl_thitruong),1.2),"");
thitruong_statusc2=WriteIf(LastValue(ROC_thitruong)<0,WriteVal(LastValue(Cl_thitruong),1.2),"");
thitruong_statusc3=WriteIf(LastValue(ROC_thitruong)==0,WriteVal(LastValue(Cl_thitruong),1.2),"");
thitruong_statust1=WriteIf(LastValue(ROC_thitruong)>0,WriteVal(LastValue(ROC_thitruong),1.2)+" %","");
thitruong_statust2=WriteIf(LastValue(ROC_thitruong)<0,WriteVal(LastValue(ROC_thitruong),1.2)+" %","");
thitruong_statust3=WriteIf(LastValue(ROC_thitruong)==0,WriteVal(LastValue(ROC_thitruong),1.2)+" %","");
GfxSetOverlayMode( 2 );
GfxSetBkMode( 0 ); // transparent
GfxSelectPen( colorLightGrey, 1 );
GfxSelectSolidBrush( ColorBlend( colorLightGrey, colorWhite, 0.8 ) );
GfxRoundRect(((303*e)+1)/1880*pxwidth, 0, (303*(e+1))/1880*pxwidth, 65/870*pxheight, 15, 15 );
GfxSelectFont( "Verdana", 14/870*pxheight, 700 );
GfxSetTextColor( colorGrey40 );
GfxTextOut(thitruong1,(20+303*e+XX)/1880*pxwidth, 10/870*pxheight);
GfxSelectFont( "Verdana", 12/870*pxheight, 500 );
GfxTextOut(WriteVal(CHG_thitruong,1.2),(35+303*e)/1880*pxwidth, 35/870*pxheight);
	GfxSelectFont( "Verdana", 12/870*pxheight, 600 );
    GfxSetTextColor( colorGreen);
    GfxTextOut( thitruong_statusc1, (190+303*e)/1880*pxwidth, 10/870*pxheight );
    GfxSelectFont( "Verdana", 10/870*pxheight, 600 );
    GfxTextOut( thitruong_statust1, (190+303*e)/1880*pxwidth, 40/870*pxheight );
    GfxSelectFont( "Verdana", 12/870*pxheight, 600 );
    GfxSetTextColor( colorRed);
    GfxTextOut( thitruong_statusc2, (190+303*e)/1880*pxwidth, 10/870*pxheight );
    GfxSelectFont( "Verdana", 10/870*pxheight, 600 );
    GfxTextOut( thitruong_statust2, (190+303*e)/1880*pxwidth, 40/870*pxheight );
    GfxSelectFont( "Verdana", 12/870*pxheight, 600 );
    GfxSetTextColor( colorDarkYellow);
    GfxTextOut( thitruong_statusc3, (190+303*e)/1880*pxwidth, 10/870*pxheight );
    GfxSelectFont( "Verdana", 10/870*pxheight, 600 );
    GfxTextOut( thitruong_statust3, (190+303*e)/1880*pxwidth, 40/870*pxheight );
}
}

GfxSelectSolidBrush( ColorBlend( colorLightGrey, colorWhite, 0.8 ) );
GfxRoundRect( 1517/1880*pxwidth, 0, 1880/1880*pxwidth, 65/870*pxheight, 15, 15 );
		GfxSetOverlayMode( 2 );
		GfxSetBkMode( 0 );
		GfxSetTextAlign( 6 );
GfxSelectFont("Verdana",10/870*pxheight, 700);
GfxSetTextColor( colorBlue );
GfxTextOut("TSI - HEATMAP", 1790/1880*pxwidth, 5/870*pxheight);
GfxSelectFont("Verdana",8.5/870*pxheight, 500);
GfxSetTextColor( colorDarkGrey );
GfxTextOut("Date: "+Date(), 1790/1880*pxwidth, 25/870*pxheight);
GfxTextOut("Time: " + Now( 2 ), 1790/1880*pxwidth, 45/870*pxheight);
GfxSelectFont("Verdana",9/870*pxheight, 700);
GfxSetTextColor( colorRed );
GfxTextOut("EDIT BY HUY TUAN", 1620/1880*pxwidth, 15/870*pxheight);
GfxTextOut("0 9 3 7 7 9 8 5 3 4", 1620/1880*pxwidth, 35/870*pxheight);
